func generateKey(APIstub shim.ChaincodeStubInterface, key string) []byte {

   var isFirst bool = false

   musickeyAsBytes, err := APIstub.GetState(key)
   if err != nil {
      fmt.Println(err.Error())
   }

   musickey := MusicKey{}
   json.Unmarshal(musickeyAsBytes, &musickey)
   var tempIdx string
   tempIdx = strconv.Itoa(musickey.Idx)
   fmt.Println(musickey)
   fmt.Println("Key is " + strconv.Itoa(len(musickey.Key)))
   if len(musickey.Key) == 0 || musickey.Key == "" {
      isFirst = true
      musickey.Key = "MS"
   }
   if !isFirst {
      musickey.Idx = musickey.Idx + 1
   }

   fmt.Println("Last MusicKey is " + musickey.Key + " : " + tempIdx)

   returnValueBytes, _ := json.Marshal(musickey)

   return returnValueBytes
}

func (s *SmartContract) setMusic(APIstub shim.ChaincodeStubInterface, args []string) pb.Response {
   if len(args) != 4 {
      return shim.Error("Incorrect number of arguments. Expecting 4")
   }
   
   var musickey = MusicKey{}
   json.Unmarshal(generateKey(APIstub, "latestKey"), &musickey)
   keyidx := strconv.Itoa(musickey.Idx)
   fmt.Println("Key : " + musickey.Key + ", Idx : " + keyidx)

   var music = Music{Title: args[0], Singer: args[1], Price: args[2], WalletID: args[3], Count: "0"}
   musicAsJSONBytes, _ := json.Marshal(music)

   var keyString = musickey.Key + keyidx
   fmt.Println("musickey is " + keyString)

   err := APIstub.PutState(keyString, musicAsJSONBytes)
   if err != nil {
      return shim.Error(fmt.Sprintf("Failed to record music catch: %s", musickey))
   }

   musickeyAsBytes, _ := json.Marshal(musickey)
   APIstub.PutState("latestKey", musickeyAsBytes)

   return shim.Success(nil)
}
func (s *SmartContract) getAllMusic(APIstub shim.ChaincodeStubInterface) pb.Response {
   
   // Find latestKey
   musickeyAsBytes, _ := APIstub.GetState("latestKey")
   musickey := MusicKey{}
   json.Unmarshal(musickeyAsBytes, &musickey)
   idxStr := strconv.Itoa(musickey.Idx + 1)

   var startKey = "MS0"
   var endKey = musickey.Key + idxStr
   fmt.Println(startKey)
   fmt.Println(endKey)

   resultsIter, err := APIstub.GetStateByRange(startKey, endKey)
   if err != nil {
      return shim.Error(err.Error())
   }
   defer resultsIter.Close()
   
   var buffer bytes.Buffer
   buffer.WriteString("[")
   bArrayMemberAlreadyWritten := false
   for resultsIter.HasNext() {
      queryResponse, err := resultsIter.Next()
      if err != nil {
         return shim.Error(err.Error())
      }
      
      if bArrayMemberAlreadyWritten == true {
         buffer.WriteString(",")
      }
      buffer.WriteString("{\"Key\":")
      buffer.WriteString("\"")
      buffer.WriteString(queryResponse.Key)
      buffer.WriteString("\"")
      
      buffer.WriteString(", \"Record\":")
      
      buffer.WriteString(string(queryResponse.Value))
      buffer.WriteString("}")
      bArrayMemberAlreadyWritten = true
   }
   buffer.WriteString("]\n")
   return shim.Success(buffer.Bytes())
}
